package b_socket;

/*
Socket简介:
    网络编程也叫socket编程,套接字编程,指的是用来实现网络互联的,不同计算机和不同的网络终端设备间的应用程序,可以进行数据交互
    网络编程原理:
        网络通信:通讯两端都有自己的socket对象,数据在两个scoket之间通过数据包或者IO流进行传输
    软件架构:
        C/S架构: Client/Server
            好处: 界面相对美观(前端界面是存储在客户端的),部分内容可以提前加载到本地,所以性能好,服务器压力小
            弊端: 部分数据存储在客户端,不安全, 服务器升级更新后,客户端必须同步更新才达到更新效果
        B/S架构: Browser/Server
            好处: 操作方便,不用下载,只要有浏览器可以上网即可,使用更加灵活,不局限于某一款浏览器
            弊端: 所需的数据都要存储在服务器上,服务器压力大, 用户远程读取数据比较慢,用户体验差

    网络编程三要素
        ip地址:
            设备在互联网中的唯一标识
            组成: 网络号码(网关) + 主机地址
            分类:  192.168.88.100  ipv4(点分十进制)
                城域网: 1 + 3   第一部分是网关,其他是主机地址
                广域网: 2 + 2  前两个部分是网关,其他是主机地址
                局域网: 3 + 1  前3个部分是网关,最后一部分是主机地址
            特殊IP:
                255.255.255.255  广播地址
                127.0.0.1 本地会还地址

        端口号
            指程序在设备上的唯一标示,所有的数据传输都需要通过端口
            范围:
                0-65535, 其中0-1023之间是知名端口号,不要使用
                1024-65535是动态端口号,程序员可以使用,启动一个服务,如果没有指定端口号,会自动分配一个动态端口号
                每个进程间,端口号不可以重复

        协议
            udp:
                1.面向无连接(面向数据包)
                2.采用数据包的形式发送数据,每个包的大小不超过64kb
                3.不安全,不可靠
                4.效率相对较高
                5.不区分客户端和服务端

            tcp:
                1.面向连接(有链接) 三次握手,四次挥手
                2.采用IO流(字节流)的形式放松数据,理论上无数据大小限制
                3.安全可靠
                4.相对效率较低
                5.区分客户端和服务端

 */

public class Demo01 {
}
